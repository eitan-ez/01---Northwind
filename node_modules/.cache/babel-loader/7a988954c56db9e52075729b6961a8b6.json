{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eitan\\\\Documents\\\\JohnBryce\\\\React\\\\01 - Northwind\\\\src\\\\Components\\\\HomeArea\\\\Clock\\\\Clock.tsx\";\nimport { Component } from \"react\";\nimport \"./Clock.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Clock extends Component {\n  // Timer code - used for closing the timer.\n  // 1. ctor - react creates an object from this class\n  // usage: send props to super class, init state\n  constructor(props) {\n    super(props);\n    this.timerId = void 0;\n    this.state = {\n      time: \"\"\n    };\n  } // 2. render - UI needs to be updated\n  // usage: return back the component UI\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Clock Box\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  } // 3. componentDidMount - component is ready for use\n  // usage: perform side-effects once.\n\n\n  componentDidMount() {\n    this.timerId = window.setInterval(() => {\n      const now = new Date();\n      this.setState({\n        time: now.toLocaleTimeString()\n      });\n    }, 1000);\n  } // 4. componentDidUpdate - props or state has been changed\n  // usage: do your logic if props or state has been changed.\n\n\n  componentDidUpdate() {} // 5. componentWillUnmount - component is about to be destroyed\n  // usage: close things, clean things, kill things...\n\n\n  componentWillUnmount() {\n    window.clearInterval(this.timerId); // Close the timer.\n  }\n\n}\n\nexport default Clock;","map":{"version":3,"sources":["C:/Users/Eitan/Documents/JohnBryce/React/01 - Northwind/src/Components/HomeArea/Clock/Clock.tsx"],"names":["Component","Clock","constructor","props","timerId","state","time","render","componentDidMount","window","setInterval","now","Date","setState","toLocaleTimeString","componentDidUpdate","componentWillUnmount","clearInterval"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,aAAP;;;AAMA,MAAMC,KAAN,SAAoBD,SAApB,CAA8C;AAEjB;AAEzB;AACA;AACOE,EAAAA,WAAW,CAACC,KAAD,EAAY;AAC1B,UAAMA,KAAN;AAD0B,SAJtBC,OAIsB;AAE1B,SAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAb;AACH,GATyC,CAW1C;AACA;;;AACOC,EAAAA,MAAM,GAAgB;AACzB,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI;AAAA,kBAAI,KAAKF,KAAL,CAAWC;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAnByC,CAqB1C;AACA;;;AACOE,EAAAA,iBAAiB,GAAS;AAC7B,SAAKJ,OAAL,GAAeK,MAAM,CAACC,WAAP,CAAmB,MAAM;AACpC,YAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,WAAKC,QAAL,CAAc;AAAEP,QAAAA,IAAI,EAAEK,GAAG,CAACG,kBAAJ;AAAR,OAAd;AACH,KAHc,EAGZ,IAHY,CAAf;AAIH,GA5ByC,CA8B1C;AACA;;;AACOC,EAAAA,kBAAkB,GAAS,CAEjC,CAlCyC,CAoC1C;AACA;;;AACOC,EAAAA,oBAAoB,GAAS;AAChCP,IAAAA,MAAM,CAACQ,aAAP,CAAqB,KAAKb,OAA1B,EADgC,CACI;AACvC;;AAxCyC;;AA2C9C,eAAeH,KAAf","sourcesContent":["import { Component } from \"react\";\nimport \"./Clock.css\";\n\ninterface ClockState {\n    time: string;\n}\n\nclass Clock extends Component<{}, ClockState> {\n\n    private timerId: number; // Timer code - used for closing the timer.\n\n    // 1. ctor - react creates an object from this class\n    // usage: send props to super class, init state\n    public constructor(props: {}) {\n        super(props);\n        this.state = { time: \"\" };\n    }\n\n    // 2. render - UI needs to be updated\n    // usage: return back the component UI\n    public render(): JSX.Element {\n        return (\n            <div className=\"Clock Box\">\n                <p>{this.state.time}</p>\n            </div>\n        );\n    }\n\n    // 3. componentDidMount - component is ready for use\n    // usage: perform side-effects once.\n    public componentDidMount(): void {\n        this.timerId = window.setInterval(() => {\n            const now = new Date();\n            this.setState({ time: now.toLocaleTimeString() });\n        }, 1000);\n    }\n\n    // 4. componentDidUpdate - props or state has been changed\n    // usage: do your logic if props or state has been changed.\n    public componentDidUpdate(): void {\n\n    }\n\n    // 5. componentWillUnmount - component is about to be destroyed\n    // usage: close things, clean things, kill things...\n    public componentWillUnmount(): void {\n        window.clearInterval(this.timerId); // Close the timer.\n    }\n}\n\nexport default Clock;\n"]},"metadata":{},"sourceType":"module"}